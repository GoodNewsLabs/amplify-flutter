// Generated with smithy-dart 0.3.0. DO NOT MODIFY.

library amplify_logging_dart.cloud_watch_logs.model.result_field; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'package:aws_common/aws_common.dart' as _i1;
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';
import 'package:smithy/smithy.dart' as _i2;

part 'result_field.g.dart';

/// Contains one field from one log event returned by a CloudWatch Logs Insights query, along with the value of that field.
///
/// For more information about the fields that are generated by CloudWatch logs, see [Supported Logs and Discovered Fields](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_AnalyzeLogData-discoverable-fields.html).
abstract class ResultField
    with _i1.AWSEquatable<ResultField>
    implements Built<ResultField, ResultFieldBuilder> {
  /// Contains one field from one log event returned by a CloudWatch Logs Insights query, along with the value of that field.
  ///
  /// For more information about the fields that are generated by CloudWatch logs, see [Supported Logs and Discovered Fields](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_AnalyzeLogData-discoverable-fields.html).
  factory ResultField({
    String? field,
    String? value,
  }) {
    return _$ResultField._(
      field: field,
      value: value,
    );
  }

  /// Contains one field from one log event returned by a CloudWatch Logs Insights query, along with the value of that field.
  ///
  /// For more information about the fields that are generated by CloudWatch logs, see [Supported Logs and Discovered Fields](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_AnalyzeLogData-discoverable-fields.html).
  factory ResultField.build([void Function(ResultFieldBuilder) updates]) =
      _$ResultField;

  const ResultField._();

  static const List<_i2.SmithySerializer> serializers = [
    ResultFieldAwsJson11Serializer()
  ];

  @BuiltValueHook(initializeBuilder: true)
  static void _init(ResultFieldBuilder b) {}

  /// The log event field.
  String? get field;

  /// The value of this field.
  String? get value;
  @override
  List<Object?> get props => [
        field,
        value,
      ];
  @override
  String toString() {
    final helper = newBuiltValueToStringHelper('ResultField');
    helper.add(
      'field',
      field,
    );
    helper.add(
      'value',
      value,
    );
    return helper.toString();
  }
}

class ResultFieldAwsJson11Serializer
    extends _i2.StructuredSmithySerializer<ResultField> {
  const ResultFieldAwsJson11Serializer() : super('ResultField');

  @override
  Iterable<Type> get types => const [
        ResultField,
        _$ResultField,
      ];
  @override
  Iterable<_i2.ShapeId> get supportedProtocols => const [
        _i2.ShapeId(
          namespace: 'aws.protocols',
          shape: 'awsJson1_1',
        )
      ];
  @override
  ResultField deserialize(
    Serializers serializers,
    Iterable<Object?> serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = ResultFieldBuilder();
    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final value = iterator.current;
      switch (key) {
        case 'field':
          if (value != null) {
            result.field = (serializers.deserialize(
              value,
              specifiedType: const FullType(String),
            ) as String);
          }
          break;
        case 'value':
          if (value != null) {
            result.value = (serializers.deserialize(
              value,
              specifiedType: const FullType(String),
            ) as String);
          }
          break;
      }
    }

    return result.build();
  }

  @override
  Iterable<Object?> serialize(
    Serializers serializers,
    Object? object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final payload = (object as ResultField);
    final result = <Object?>[];
    if (payload.field != null) {
      result
        ..add('field')
        ..add(serializers.serialize(
          payload.field!,
          specifiedType: const FullType(String),
        ));
    }
    if (payload.value != null) {
      result
        ..add('value')
        ..add(serializers.serialize(
          payload.value!,
          specifiedType: const FullType(String),
        ));
    }
    return result;
  }
}
